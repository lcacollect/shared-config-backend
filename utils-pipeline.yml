trigger:
  branches:
    include:
    - main

resources:
  repositories:
  - repository: self

variables:
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  workingDirectory: "."

  # Type of update
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isPR: $[eq(variables['Build.Reason'], 'PullRequest')]

stages:
- stage: Test
  displayName: Run tests
  jobs:
    - job: Test
      displayName: Test
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: "3.10"
        - script: python -m pip install poetry && poetry install
          workingDirectory: $(workingDirectory)
          displayName: Install
        - script: poetry run black --check src/
          workingDirectory: $(workingDirectory)
          displayName: Lint
        - script: poetry run pytest tests/ --cov=src/ --cov-branch --cov-report=xml --junitxml=junit/test-results.xml 
          workingDirectory: $(workingDirectory)
          displayName: Test
        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: 'test-output.xml'
            testRunTitle: 'Publish test results'
        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: 'coverage.xml'

- stage: Artifact
  displayName: Build and publish Artifact
  condition: and(succeeded(), and(eq(variables.isMain, 'true'), eq(variables.isPR, 'false')))
  jobs:
    - job: Install
      displayName: Build and publish package
      pool:
        vmImage: $(vmImageName)
      variables:
        - group: artifactsBackendSecrets # variable group
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: "3.10"
        - script: python -m pip install poetry && poetry install
          workingDirectory: $(workingDirectory)
          displayName: Install
        - script: poetry publish --build
          displayName: Build and Publish
          workingDirectory: $(workingDirectory)
          env:
            POETRY_PYPI_TOKEN_PYPI=$(pypi-token)
